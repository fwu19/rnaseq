workDir = '/hpc/temp/_SR/Genomics/users/fwu/nextflow/work'

process {
    executor = 'slurm'
    queue = 'campus-new'
	errorStrategy = 'retry'
	maxRetries = 3
}

env {
	MPLCONFIGDIR = '/hpc/temp/_SR/Genomics/users/fwu/nextflow/cache'
	R_LIBS = '/fh/fast/_SR/Genomics/user/fwu/R/x86_64-pc-linux-gnu-library/4.1' 
}

report {
    enabled = true
    file = "rnaseq_nextflow_report.html"
    overwrite = true
}

params {
    cat_fastq = true
    run_alignment = false
    run_qc = false
    run_fastqc = false
    run_rnaseqc = false
    run_rseqc = false
    run_multiqc = false
    run_de = false

    workflow_regular = true
    workflow_pdx = false
}    

if (params.workflow_regular){
    params.worflow_pdx = false
}
if (params.workflow_pdx){
    params.workflow_regular = false
}

if (!params.run_alignment){
        params.run_rnaseqc = false
        params.run_rseqc = false
}

if (!params.run_qc) {
        params.run_fastqc = false
        params.run_rnaseqc = false
        params.run_rseqc = false
        params.run_multiqc = false
}

// Capture exit codes from upstream processes when piping
process.shell = ["/bin/bash", "-euo", "pipefail"]

def trace_timestamp = new java.util.Date().format( "yyyy-MM-dd_HH-mm-ss")
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

