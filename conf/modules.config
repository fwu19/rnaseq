
/*
========================================================================================
    MODULES
========================================================================================
*/

process {
    withName: CAT_GENOME_FA {
        ext.args = ""
        publishDir = [
                path: { "${params.outdir}/references/${params.genome}" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_reference
            ]
    }

    withName: CAT_GTF {
        ext.args = ""
        publishDir = [
                path: { "${params.outdir}/references/${params.genome}" },
                mode: "${params.publish_dir_mode}",
                enabled: params.save_reference
            ]
    }

    withName: MAKE_STAR {
        ext.args = ""
        publishDir = [
                path: { "${params.outdir}/references/${params.genome}" },
                mode: "${params.publish_dir_mode}",
                pattern: 'STAR2Index',
                enabled: params.only_build_index || params.save_reference
            ]
    }

    withName: MAKE_BWA {
        ext.args = " "
        publishDir = [
                path: { "${params.outdir}/references/${params.genome}" },
                mode: "${params.publish_dir_mode}",
                pattern: 'BWAIndex',
                enabled: params.only_build_index || params.save_reference
            ]
    }

    withName: GTF2BED {
        ext.args = " "
        publishDir = [
                path: { "${params.outdir}/references/${params.genome}" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.bed',
                enabled: params.save_reference
            ]
    }

    withName: GTF2FASTA {
        ext.args = " "
        publishDir = [
                path: { "${params.outdir}/references/${params.genome}" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.fa',
                enabled: params.save_reference
            ]
    }

    withName: COLLAPSE_GTF {
        ext.args = " "
        publishDir = [
                path: { "${params.outdir}/references/${params.genome}" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.gtf',
                enabled: params.save_reference
            ]
    }

    withName: GTF2GENES {
        ext.args = " "
        publishDir = [
                path: { "${params.outdir}/references/${params.genome}" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.txt',
                enabled: params.save_reference
            ]
    }

    withName: GTF2TRANSCRIPTS {
        ext.args = " "
        publishDir = [
                path: { "${params.outdir}/references/${params.genome}" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.txt',
                enabled: params.save_reference
            ]
    }

    withName: GET_FASTQ_PATHS {
        ext.args = ""
        publishDir = [
                path: { "${params.outdir}/pipeline_info/" },
                mode: "${params.publish_dir_mode}",
                pattern: 'input.csv',
                enabled: false
            ]
    }

    withName: CHECK_INPUT {
        publishDir = [
            [
                path: { "${params.outdir}/pipeline_info/" },
                mode: "${params.publish_dir_mode}",
                pattern: 'samplesheet.valid.csv',
                enabled: true
            ],
            [
                path: { "${params.outdir}/pipeline_info/" },
                mode: "${params.publish_dir_mode}",
                pattern: 'fq.csv',
                enabled: params.run_cat_fastq
            ]   
        ]   
    }

    withName: CUTADAPT {
        ext.args = ""
        publishDir = [
            [
                path: { "${params.outdir}/trimmed_fastq/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.gz',
                enabled: params.only_trim_fastq
            ],
            [
                path: { "${params.outdir}/QC/cutadapt/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.json',
                enabled: params.run_cut_adapt
            ]
        ]   
    }

    withName: FASTP {
        ext.args = ""
        publishDir = [
            [
                path: { "${params.outdir}/trimmed_fastq/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.gz',
                enabled: params.only_trim_fastq
            ],
            [
                path: { "${params.outdir}/QC/fastp" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.{json,html}',
                enabled: params.run_fastp
            ]
        ]   
    }

    withName: CAT_FASTQ {
        publishDir = [
            path: { "${params.outdir}/merged_fastq/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*.gz',
            enabled: false
        ]   
    }

    withName: SPLIT_FASTQ {
        ext.args = "-O ./ -f -e .gz "
        publishDir = [
            path: { "${params.outdir}/split_fastq/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*part_*.gz',
            enabled: false
        ]   
    }

    withName: FASTQC {
        publishDir = [
            path: { "${params.outdir}/QC/fastqc/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*.{html,zip}',
            enabled: true
        ]   
    }

    withName: FASTQC_TRIMMED {
        publishDir = [
            path: { "${params.outdir}/QC/fastqc_trimmed/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*.{html,zip}',
            enabled: true
        ]   
    }

    withName: STAR {
        ext.args = ""
        ext.rg = "CN:FredHutch"
        publishDir = [
            path: { "${params.outdir}/STAR/${params.genome}/" },
            mode: "${params.publish_dir_mode}",
            saveAs: { fn ->
                fn.startsWith('output') ? null :
                fn.endsWith('bam') ? fn :
                fn.endsWith('bai') ? fn :
                "_work/${fn}"
            },
            enabled: true
        ]   
    }

    withName: SALMON {
        publishDir = [
            path: { "${params.outdir}/Salmon/${params.genome}/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*',
            enabled: true
        ]   
    }

    withName: ARRIBA {
        publishDir = [
            path: { "${params.outdir}/Arriba/${params.genome}/" },
            mode: "${params.publish_dir_mode}",
            saveAs: { fn ->
                fn.endsWith('out.bam') ? "_work/${fn}" :
                fn.endsWith('bam') ? fn :
                fn.endsWith('bai') ? fn :
                fn.endsWith('fusions.tsv') ? fn :
                "_work/${fn}"
            },
            enabled: true
        ]   
    }

    withName: BWA_MEM {
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/BWA-MEM/${params.genome}/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*',
            enabled: true
        ]   
    }


    withName: MERGE_BAM {
        publishDir = [
            path: { "${params.outdir}/merged_bam/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*',
            enabled: false
        ]   
    }

    withName: SAMTOOLS_VIEW {
        publishDir = [
            path: { "${params.outdir}/QC/samtools/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*',
            enabled: true
        ]   
    }

    withName: RNASEQC {
        publishDir = [
            path: { "${params.outdir}/QC/rnaseqc/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*',
            enabled: true
        ]   
    }

    withName: RSEQC {
        publishDir = [
            path: { "${params.outdir}/QC/rseqc/" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.{txt,pdf,r,bed,log,xls,xlsx}",
            enabled: true
        ]   
    }

    withName: FEATURECOUNTS {
        publishDir = [
            path: { "${params.outdir}/featureCounts/" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.{txt,summary}",
            enabled: true
        ]   
    }

    withName: HS_METRICS {
        publishDir = [
            path: { "${params.outdir}/QC/gatk/" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.{hs_metrics.txt}",
            enabled: true
        ]   
    }

    withName: GENERATE_GENE_COUNT_MATRIX {
        publishDir = [
            [
                path: { "${params.outdir}/expression_quantification/" },
                mode: "${params.publish_dir_mode}",
                pattern: "all_samples.*",
                enabled: true
            ],
            [
                path: { "saved_data/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.rds",
                enabled: true
            ],
            
        ]   
    }

    withName: DIFFERENTIAL_GENES {
        publishDir = [
            [
                path: { "${params.outdir}/differential_genes/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*_vs_*",
                enabled: true
            ],
            [
                path: { "${params.outdir}/differential_genes/" },
                mode: "${params.publish_dir_mode}",
                pattern: "all_samples.*.txt",
                enabled: true
            ],

            [
                path: { "saved_data/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.rds",
                enabled: true
            ],
            
        ]   
    }

    withName: GENERATE_TRANSCRIPT_COUNT_MATRIX {
        publishDir = [
            [
                path: { "${params.outdir}/expression_quantification/" },
                mode: "${params.publish_dir_mode}",
                pattern: "all_samples.*",
                enabled: true
            ],
            [
                path: { "saved_data/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.rds",
                enabled: true
            ],
            
        ]   
    }

        withName: DIFFERENTIAL_TRANSCRIPTS {
        publishDir = [
            [
                path: { "${params.outdir}/differential_transcripts/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*_vs_*",
                enabled: true
            ],
            [
                path: { "${params.outdir}/differential_transcripts/" },
                mode: "${params.publish_dir_mode}",
                pattern: "all_samples.*.txt",
                enabled: true
            ],
            [
                path: { "saved_data/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.rds",
                enabled: true
            ],
            
        ]   
    }

    withName: MULTIQC {
        publishDir = [
            [
                path: { "${params.outdir}/MultiQC" },
                mode: "${params.publish_dir_mode}",
                pattern: "multiqc_data",
                enabled: true
            ],
            [
                path: { "${params.outdir}/MultiQC" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.html",
                enabled: true
            ]
        ]   
    }

    withName: GENERATE_REPORT {
        publishDir = [
            [
                path: { "${params.outdir}/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.html",
                enabled: true
            ],
            [
                path: { "saved_data/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*.{rds,Rmd,html}",
                enabled: true
            ]
        ]   
    }

    withName: WRITE_CSV_ALIGN_FASTQ {
        publishDir = [
            path: { "${params.outdir}/csv/" },
            mode: "${params.publish_dir_mode}",
            pattern: 'align_fastq.csv',
            enabled: true
        ]   
    }

}

